// Импортируются два модуля:
// - `AuthUtils`: утилиты для работы с аутентификацией, включая методы для управления токенами и данными пользователя.
// - `AuthService`: служба, ответственная за взаимодействие с сервером для выполнения операций аутентификации, таких как логин и логаут.
import {AuthUtils} from "../../utils/auth-utils";
import {AuthService} from "../../services/auth-service";

// Класс `Logout` предназначен для обработки процесса выхода пользователя из системы.
// Внутри класса объявляется свойство `openNewRoute`, которое будет использоваться
// для перенаправления пользователя на другую страницу.
export class Logout {
    openNewRoute = null;

    // Конструктор принимает функцию `openNewRoute`, которую он присваивает свойству класса.
    // Эта функция используется для перенаправления пользователя.
    constructor(openNewRoute) {
        this.openNewRoute = openNewRoute;

        // Код проверяет, существуют ли токены доступа и обновления. Если они отсутствуют,
        // это означает, что пользователь не авторизован. В таком случае происходит перенаправление
        // на страницу логина (`/login`).
        if (!AuthUtils.getAuthInfo(AuthUtils.accessTokenKey) || !AuthUtils.getAuthInfo(AuthUtils.refreshTokenKey)) {
            return this.openNewRoute('/login');
        }

        // Метод `logout()` вызывается для завершения процесса выхода. Использование `then()` показывает,
        // что код ожидает асинхронный результат, однако никакие действия после завершения не указаны.
        this.logout().then();
    }

    //  Этот метод отвечает за выполнение действий, необходимых для завершения сессии.
    //  Он ожидает завершения асинхронного запроса к `AuthService.logout`, который должен отправить
    //  запрос на сервер с использованием токена обновления.
    async logout() {
        await AuthService.logout({
            refreshToken: AuthUtils.refreshTokenKey
        });

        AuthUtils.removeAuthInfo();

        this.openNewRoute('/login');
    }
}